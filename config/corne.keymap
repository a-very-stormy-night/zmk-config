/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &mt LEFT_GUI F            &kp P                      &mt LEFT_ALT B    &kp J            &kp L        &kp U                 &kp Y    &kp SEMICOLON  &soft_off
&out OUT_TOG  &kp A  &kp R  &kp S                     &mt LEFT_SHIFT T           &kp G             &kp M            &kp N        &kp E                 &kp I    &kp O          &kp SQT
&bt BT_PRV    &kp Z  &kp X  &kp C                     &kp D                      &kp V             &kp K            &kp H        &kp COMMA             &kp DOT  &kp FSLH       &bt BT_NXT
                            &kp LS(LA(LC(LG(LGUI))))  &mt LEFT_CONTROL KP_ENTER  &lt 2 ESCAPE      &lt 3 BACKSPACE  &lt 1 SPACE  &kp LS(LC(LA(RALT)))
            >;
        };

        layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LS(TILDE)  &kp GRAVE            &kp LS(STAR)   &kp LS(PLUS)   &kp LS(POUND)  &kp LCTRL    &kp LCTRL  &kp LBKT      &kp RBKT      &kp BSLH  &kp LS(PIPE)  &trans
&kp LS(DLLR)   &kp LS(EXCLAMATION)  &kp LS(UNDER)  &kp EQUAL      &kp MINUS      &kp LGUI     &kp LGUI   &kp LS(LPAR)  &kp LS(RPAR)  &trans    &kp SQT       &kp LS(DQT)
&trans         &kp AT_SIGN          &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LALT     &kp LALT   &kp LS(LBRC)  &kp LS(RBRC)  &trans    &trans        &trans
                                                   &trans         &trans         &trans       &trans     &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&kp LCTRL  &kp HOME  &kp LC(LS(TAB))  &kp UP        &kp LC(TAB)    &kp PAGE_UP      &trans  &kp N7  &kp N8  &kp N0  &kp LOCKING_NUM  &kp LCTRL
&kp LGUI   &kp END   &kp LEFT         &kp DOWN      &kp RIGHT      &kp PAGE_DOWN    &kp N0  &kp N4  &kp N5  &kp N6  &kp CAPSLOCK     &kp LGUI
&kp LALT   &trans    &trans           &kp LC(LEFT)  &kp LC(RIGHT)  &trans           &trans  &kp N1  &kp N2  &kp N3  &trans           &kp LALT
                                      &trans        &trans         &trans           &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&bt BT_CLR_ALL  &trans  &trans  &trans                &trans                &trans        &kp PG_UP  &kp LC(LS(TAB))  &kp UP         &kp LC(TAB)  &kp HOME  &trans
&bt BT_CLR      &trans  &trans  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp K_MUTE    &kp PG_DN  &kp LEFT         &kp DOWN       &kp RIGHT    &kp END   &trans
&trans          &trans  &trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans        &trans     &kp LC(LEFT)     &kp LC(RIGHT)  &trans       &trans    &trans
                                &trans                &trans                &trans        &trans     &trans           &trans
            >;
        };
    };
};
