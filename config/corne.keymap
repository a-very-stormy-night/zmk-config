/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <100>;
    require-prior-idle-ms = <150>;
};

&lt {
    quick-tap-ms = <100>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <150>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &mt LEFT_GUI F            &kp P                      &kp B             &kp J            &kp L             &mt LEFT_GUI U        &kp Y    &kp SEMICOLON  &out OUT_TOG
&out OUT_TOG  &kp A  &kp R  &kp S                     &mt LEFT_SHIFT T           &mt LEFT_ALT G    &mt LEFT_ALT M   &mt LEFT_SHIFT N  &kp E                 &kp I    &kp O          &kp SQT
&bt BT_PRV    &kp Z  &kp X  &kp C                     &kp D                      &kp V             &kp K            &kp H             &kp COMMA             &kp DOT  &kp FSLH       &bt BT_NXT
                            &kp LS(LA(LC(LG(LGUI))))  &mt LEFT_CONTROL KP_ENTER  &lt 2 ESCAPE      &lt 3 BACKSPACE  &lt 1 SPACE       &kp LS(LC(LA(RALT)))
            >;
        };

        layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE   &kp GRAVE    &kp HASH    &kp ASTERISK    &kp AMPERSAND    &kp LEFT_CONTROL    &kp LCTRL  &kp LBKT      &kp RBKT      &kp BSLH  &kp LS(PIPE)  &none
&kp DOLLAR  &kp EQUAL    &kp DOLLAR  &kp UNDERSCORE  &kp MINUS        &kp LGUI            &kp LGUI   &kp LS(LPAR)  &kp LS(RPAR)  &none     &kp SQT       &kp LS(DQT)
&none       &kp AT_SIGN  &kp PLUS    &kp PERCENT     &kp EXCLAMATION  &kp LALT            &kp LALT   &kp LS(LBRC)  &kp LS(RBRC)  &none     &none         &none
                                     &none           &none            &none               &none      &none         &none
            >;
        };

        layer_2 {
            bindings = <
&kp LCTRL  &kp HOME  &kp LC(LS(TAB))  &kp UP        &kp LC(TAB)    &kp PAGE_UP      &none   &kp N7  &kp N8  &kp NUMBER_9  &kp LOCKING_NUM  &kp LCTRL
&kp LGUI   &kp END   &kp LEFT         &kp DOWN      &kp RIGHT      &kp PAGE_DOWN    &kp N0  &kp N4  &kp N5  &kp N6        &kp CAPSLOCK     &kp LGUI
&kp LALT   &none     &none            &kp LC(LEFT)  &kp LC(RIGHT)  &none            &none   &kp N1  &kp N2  &kp N3        &none            &kp LALT
                                      &none         &none          &none            &none   &none   &none
            >;
        };

        layer_3 {
            bindings = <
&bt BT_CLR_ALL  &none  &none  &none                 &none                 &none         &kp PG_UP  &kp LC(LS(TAB))  &kp UP         &kp LC(TAB)  &kp HOME  &none
&bt BT_CLR      &none  &none  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp K_MUTE    &kp PG_DN  &kp LEFT         &kp DOWN       &kp RIGHT    &kp END   &none
&none           &none  &none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none      &kp LC(LEFT)     &kp LC(RIGHT)  &none        &none     &none
                              &none                 &none                 &none         &none      &none            &none
            >;
        };
    };
};
